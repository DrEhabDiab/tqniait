#!/bin/bash
#
# Script Name: External Backup Script
# Description: Bash script for external backups on specific time frames
# Author: Dr. Ehab Diab
# Website: https://www.tqniait.com
# Contact: ehab@ehabdiab.com

# This Bash script provides a set of tools for analyzing memory usage on a Linux server.
# It extracts and summarizes memory-related information from the system log files.
# Offering insights into memory usage patterns, peak usage times, and overall trends.


display_memory_usage() {
    echo " "
    echo "List all Memory usage:"
    cat /var/log/messages | grep "Memory Usage" | cut -d' ' -f6-
    echo
}

display_highest_memory() {
    echo " "
    echo "Show the highest Memory used on the server:"
    highest_memory=$(cat /var/log/messages | grep "Memory Usage" | cut -d' ' -f6- | awk -F"[ :]+" '{print $4 " MB"}' | sort -n | tail -n 1)
    echo "   Highest Memory Used: $highest_memory"
    echo
}

display_times_highest_memory() {
    echo " "
    echo "Show times that appeared to be using the highest memory on the server:"
    highest_memory=$(cat /var/log/messages | grep "Memory Usage" | cut -d' ' -f6- | awk -F"[ :]+" '{print $4 " MB"}' | sort -n | tail -n 1)
    grep "$highest_memory" /var/log/messages | awk '{print $1, $2, $3}'
    echo
}

display_lowest_memory() {
    echo " "
    echo "Show the lowest memory used on the server:"
    lowest_memory=$(cat /var/log/messages | grep "Memory Usage" | cut -d' ' -f6- | awk -F"[ :]+" '{print $4 " MB"}' | sort -n | head -n 1)
    echo "   Lowest Memory Used: $lowest_memory"
    echo
}

display_total_and_available_memory() {
    echo " "
    echo "Display Total and Available Memory:"
    cat /var/log/messages | grep "Memory Usage" | awk -F"[ :]+" '{for (i=1; i<=NF; i++) if ($i == "Total") {printf "Total: %s MB, ", $(i+1); for (j=i; j<=NF; j++) if ($j == "Available") printf "Available: %s MB\n", $(j+1)}}'
    echo
}

display_memory_summary() {
    echo " "
    echo "Display Memory Usage Summary:"
    cat /var/log/messages | grep "Memory Usage" | awk -F"[ :]+" '{print $4}' | awk '{sum += $1; values[NR] = $1} END {avg = sum/NR; printf "Average: %.2f MB, ", avg; if (NR % 2) print "Median: " values[(NR+1)/2] " MB"; else print "Median: " (values[NR/2] + values[NR/2+1]) / 2 " MB"}'
    echo
}

#time_range_analysis() {
#    echo "Time Range Analysis:"
#    echo -n "Enter start time (format: HH:MM): "
#    read start_time
#    echo -n "Enter end time (format: HH:MM): "
#    read end_time
#    grep -E "$start_time|$end_time" /var/log/messages | grep "Memory Usage" | cut -d' ' -f6-
#    echo
#}

time_range_analysis() {
    echo " "
    echo "Time Range Analysis:"
    echo -n "Enter start time (format: HH:MM): "
    read start_time
    echo -n "Enter end time (format: HH:MM): "
    read end_time

    total_memory_used=0
    total_memory=0

    grep -E "$start_time|$end_time" /var/log/messages | grep "Memory Usage" | cut -d' ' -f6- | awk -F"[ :]+" '{
        for (i=1; i<=NF; i++) {
            if ($i == "Used") {
                used_memory = $(i+1);
                total_memory_used += used_memory;
            } else if ($i == "Total") {
                total_memory = $(i+1);
            } else if ($i == "Available") {
                available_memory = $(i+1);
                print "Used: " used_memory " MB, Total: " total_memory " MB, Available: " available_memory " MB";
            }
        }
    }'

    echo "Total Memory Used in the specified time range: $total_memory_used MB"
    echo
}


memory_trends() {
    echo " "
    echo "Memory Trends:"
    cat /var/log/messages | grep "Memory Usage" | awk -F"[ :]+" '{print $1, $2, $3, $4 " MB"}' | sort
    echo
}
echo " "
echo "Options:"
echo " "
echo "1- List all Memory usage"
echo "2- Show the highest Memory used on the server"
echo "3- Show times that appeared to be using the highest memory on the server"
echo "4- Show the lowest memory used on the server"
echo "5- Display Total and Available Memory"
echo "6- Display Memory Usage Summary"
echo "7- Time Range Analysis"
echo "8- Memory Trends"
echo " "
echo -n "Enter the number of your choice: "
read choice

case $choice in
    1) display_memory_usage ;;
    2) display_highest_memory ;;
    3) display_times_highest_memory ;;
    4) display_lowest_memory ;;
    5) display_total_and_available_memory ;;
    6) display_memory_summary ;;
    7) time_range_analysis ;;
    8) memory_trends ;;
    *) echo "Invalid choice. Please enter a valid number." ;;
esac
